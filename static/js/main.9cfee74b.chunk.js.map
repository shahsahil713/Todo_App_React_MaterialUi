{"version":3,"sources":["ToDoList.jsx","Main.jsx","serviceWorker.js","index.js"],"names":["ToDoList","props","useState","line","setLine","className","aria-hidden","onClick","onSelect","id","style","textDecoration","text","Main","val","setval","items","setItems","itemDelete","console","log","oldItems","filter","errElem","index","type","onChange","e","target","value","name","placeholder","Button","map","itemVal","key","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mQAgCeA,EA5BE,SAACC,GAAW,IAAD,EACFC,oBAAS,GADP,mBACnBC,EADmB,KACbC,EADa,KAS1B,OACE,oCACE,yBAAKC,UAAU,cACb,kBAAC,IAAD,CACEA,UAAU,cACVC,cAAY,OACZC,QAAS,WACPN,EAAMO,SAASP,EAAMQ,OAGzB,kBAAC,IAAD,CAAUJ,UAAU,eAAeC,cAAY,OAAOC,QAjB9C,WAEVH,EADU,GAARD,MAiBA,wBAAIO,MAAO,CAAEC,eAAgBR,EAAO,eAAiB,SAClDF,EAAMW,S,0CCkDFC,EAlEF,WACX,IADiB,EAEKX,mBAAS,IAFd,mBAEVY,EAFU,KAELC,EAFK,OAGSb,mBAAS,IAHlB,mBAGVc,EAHU,KAGHC,EAHG,KAcXC,EAAa,SAACT,GAClBU,QAAQC,IAAIX,GACZQ,GAAS,SAACI,GACR,OAAOA,EAASC,QAAO,SAACC,EAASC,GAC/B,OAAOA,IAAUf,SAIvB,OACE,oCACE,yBAAKJ,UAAU,aACb,yBAAKA,UAAU,OACb,wCAEA,2BACEoB,KAAK,OACLC,SApBM,SAACC,GACfZ,EAAOY,EAAEC,OAAOC,QAoBRC,KAAK,WACLD,MAAOf,EACPiB,YAAY,eAEd,kBAACC,EAAA,EAAD,CAAQzB,QA/BA,WACdU,GAAS,SAACI,GACR,MAAM,GAAN,mBAAWA,GAAX,CAAqBP,OAEvBC,EAAO,KA2ByBV,UAAU,UAClC,kBAAC,IAAD,OAGF,4BACGW,EAAMiB,KAAI,SAACC,EAASV,GACnB,OACE,kBAAC,EAAD,CACEZ,KAAMsB,EACNC,IAAKX,EACLf,GAAIe,EACJhB,SAAUU,UAQtB,wBAAIb,UAAU,UAAd,oDAEE,6BACA,uBAAG+B,KAxDO,oDAyDR,kBAAC,IAAD,MADF,UAGK,OCzDOC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.9cfee74b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport DoneIcon from \"@material-ui/icons/Done\";\r\n\r\nconst ToDoList = (props) => {\r\n  const [line, setLine] = useState(false);\r\n  const cutIt = () => {\r\n    if (line == false) {\r\n      setLine(true);\r\n    } else {\r\n      setLine(false);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"todo_style\">\r\n        <DeleteIcon\r\n          className=\"fa fa-times\"\r\n          aria-hidden=\"true\"\r\n          onClick={() => {\r\n            props.onSelect(props.id);\r\n          }}\r\n        />\r\n        <DoneIcon className=\"fa fa-times2\" aria-hidden=\"true\" onClick={cutIt} />\r\n        <li style={{ textDecoration: line ? \"line-through\" : \"none\" }}>\r\n          {props.text}\r\n        </li>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ToDoList;\r\n","import React, { useState } from \"react\";\r\nimport TodoList from \"./ToDoList\";\r\n// import \"./App.css\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CallMadeIcon from \"@material-ui/icons/CallMade\";\r\n\r\n// import Task from \"./Task\";\r\n\r\nconst Main = () => {\r\n  const gitLink = \"https://github.com/shahsahil713?tab=repositories\";\r\n  const [val, setval] = useState(\"\");\r\n  const [items, setItems] = useState([]);\r\n  const addTask = () => {\r\n    setItems((oldItems) => {\r\n      return [...oldItems, val];\r\n    });\r\n    setval(\"\");\r\n  };\r\n  const addText = (e) => {\r\n    setval(e.target.value);\r\n  };\r\n\r\n  const itemDelete = (id) => {\r\n    console.log(id);\r\n    setItems((oldItems) => {\r\n      return oldItems.filter((errElem, index) => {\r\n        return index !== id;\r\n      });\r\n    });\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <h1>Todo App</h1>\r\n\r\n          <input\r\n            type=\"text\"\r\n            onChange={addText}\r\n            name=\"taskName\"\r\n            value={val}\r\n            placeholder=\"Enter Task\"\r\n          />\r\n          <Button onClick={addTask} className=\"newBtn\">\r\n            <AddIcon />\r\n          </Button>\r\n\r\n          <ol>\r\n            {items.map((itemVal, index) => {\r\n              return (\r\n                <TodoList\r\n                  text={itemVal}\r\n                  key={index}\r\n                  id={index}\r\n                  onSelect={itemDelete}\r\n                />\r\n              );\r\n            })}\r\n          </ol>\r\n        </div>\r\n      </div>\r\n\r\n      <h3 className=\"myName\">\r\n        ðŸ’² Developed By Sahil Shah ðŸ’²\r\n        <br />\r\n        <a href={gitLink}>\r\n          <CallMadeIcon />\r\n          Github\r\n        </a>{\" \"}\r\n      </h3>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport Main from \"./Main\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}